--전체 사원의 평균급여보다 많이 받는 사원의 이메일과 급여
select email, salary from employees
where salary>(select avg(salary) from employees)
order by 2;
--select avg(salary) from employees;

--email이 'JKING'인 사원의 급여보다 더 많이 받는 사람의 이메일 급여
select salary
from employees
where salary>(select salary 
              from employees 
              where email='JKING')
order by 1;
--select salary from employees where email='JKING'
select * from user_sys_privs;
select * from user_role_privs;

CREATE VIEW EMP
AS
SELECT 
   employee_id emp_id,
   first_name||' '||last_name name,
   email,
   salary,
   department_id dept_id
FROM employees;
select * from emp where employee_id=100;
drop VIEW EMP;
--단일행 sub query : 단일조건에 부합하는 결과값 출력
--80번 부서의 이메일,급여 부서번호 출력
select email,salary,e.department_id,d.department_name
from employees e join departments d
on e.department_id=d.department_id
where e.department_id=80;
--email이 'SKING'인 사원의 부서와 같은 사원의
--email,salary,department_id,department_name
select email,salary,e.department_id,d.department_name
from employees e join departments d
on e.department_id=(select department_id
                    from employees
                    where email='SKING')
and e.department_id=d.department_id;
--select department_id from employees where email='SKING'
--employees
--email이 'TFOX'의 입사일보다 이후에 입사한 사원의 명단.
--email, hire_date
select email, hire_date
from employees
where hire_date>(select hire_date
                 from employees
                 where email='TFOX')
order by 2;
--select hire_date from employees where email='TFOX';
--단일행 sub query 실행결과가 행이 1개인경우

--다중행 sub query
--employees
--department_name이 'IT' 사원의
--employee_id, email, department_id
select employee_id, email, department_id
from employees
where department_id=(select department_id 
                     from departments 
                     where department_name='IT');
--select department_id from departments where department_name='IT';
--다중행 sub query : 다중 조건에 부합하는 모든 결과값
--90번 부서의 사원들의 급여 보다 적게 받는 사람들의
--이메일 급여 부서번호
select email,salary,department_id
from employees
where salary <all(select salary
                  from employees
                  where department_id=60)
order by 2;
--select salary from employees where department_id=60;
--다중행 sub query 연산자
--in (=XXX or YYY or ZZZ)
-->all : 최대값
--<all : 최소값
-->any : 최소값
--<any : 최대값
--전체사원중 job_id가 FI_ACCOUNT 인 사원의 최소 연봉자보다 높은
--사원의 email, job_id,salary
select email, job_id, salary
from employees
where salary >any(select salary
                  from employees
                  where job_id='FI_ACCOUNT')
order by 3;

--employees 테이블을 조회하여 전체사원중 부서가 80번 부서 신입사원보다
--늦게 입사한 사원들 명단
--email, hire_date,department_id
select email, hire_date,department_id
from employees
where hire_date>all(select hire_date
                    from employees
                    where department_id=(select department_id
                                         from departments
                                         where department_name='IT'))
order by 2;

select email, salary, department_id
from employees
where salary>10000
and exists(select department_id
           from departments
           where department_name='IT');
--4.다중컬럼 : 다수의 수치가 일치하는 결과값
--부서별 최대급여를 받는 사원에
--employee_id, email, department_id, salary를 출력해주세요
select employee_id, email, department_id, salary
from employees
  --부서번호와 급여가 같은 사원   --부서그룹중에 최대급여를 받는 사원의 부서번호,급여액
where (department_id,salary) in (select department_id,max(salary)--최대급여
                                 from employees                        
                                 GROUP by department_id)--부서별
order by 3;
--select department_id, max(salary) from employees
--GROUP by department_id;

--부서별 신입사원의 명단의 출력
--email,departmet_id,hire_date 출력
select email, department_id, hire_date
from employees
where (department_id,hire_date) in(select department_id, MAX (hire_date)
                                   FROM employees
                                   GROUP BY department_id)
order by 2;
--70번 부서의 최대 급여를 받는 사원
select email,salary, department_id
from employees
where department_id=80 and salary=(select max(salary)
                                   from employees
                                   where department_id=80);
select email,salary, department_id
from employees
where (department_id,salary)=(select department_id, max(salary)
                              from employees
                              group by department_id
                              having department_id=80);
select email,salary, department_id
from employees
where (department_id,salary)in(select department_id, max(salary)
                               from employees
                               group by department_id
                               having department_id=80);
--job_id별로 해당 잡에서 최대연봉을 받는 사원
--email, job_id, salary
select email, job_id, salary
from employees
where (job_id,salary)in(select job_id, avg(salary)
                        from employees
                        group by job_id)
order by 3 DESC;

--상호 연관 sub query : 여러가지 값을 도출후 조거에 따라 출력
--전체사원중 자신의 부서의 평균 연봉과 같거나 많은사람
select email, salary, department_id--출력값
from employees e1--연봉과같거나 많은사람
where salary >= (select avg(salary)--부서별 평균연봉 출력
                 from employees e2
                 where e1.department_id=e2.department_id)--부서번호가 같을때
order by 3;
--main query의 테이블과 sub의 테이블이 연관관계로 표현됨
-------------------------------------------------------
--where 연산자 뒤에 ()로 안쪽에 표기
--1.단일행서브쿼리(single row)
--서브쿼리의 실행 결과가 항상 1건 이하인 서브쿼리를 의미
--> , < , >= , <= , <> , != , = : 단일행 비교연산자
--2.다중행서브쿼리(multi row)
--서브쿼리의 실행결과가 여러건인 서브쿼리를 의미
--in, (>, <)all, (>, <)any, (not)exists, sum : 단일행 비교연산자
--3.다중컬럼(muti column) 서브쿼리
--서브쿼리의 실행결과가 여러 커럼을 반환한다.
--main query의 조건절에서 여러컬럼을 동시에 비교가능합니다.
--비교 컬럼의 개수, 순서 동일해야합니다.
--Scalar(스칼라) 서브쿼리

--인라인 서브쿼리
